{"version":3,"sources":["components/Xml2Json.jsx","components/Header.jsx","components/MyFooter.jsx","containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["convert","require","Xml2Json","props","state","file","getFileXml","bind","getFileJson","handleSubmit","this","setState","result","textIn","document","getElementById","value","xml2json","compact","spaces","console","log","innerHTML","handler","xmlFile","json2xml","ignoreComment","className","id","placeholder","rows","style","color","isColor","onClick","Component","Header","marginTop","fontSize","marginBottom","hasTextAlign","MyFooter","href","Home","isFluid","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAEIA,EAAUC,EAAQ,IAiGPC,E,YA9Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAER,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAPH,E,4EAWjBG,KAAKC,SAAS,CACZN,KAAM,O,mCAKR,IACIO,EADAC,EAASC,SAASC,eAAe,OAAOC,MAE5C,IACEJ,EAASZ,EAAQiB,SAASJ,EAAQ,CAACK,SAAS,EAAMC,OAAQ,IAC1D,SACAC,QAAQC,IAAI,oBACZP,SAASC,eAAe,UAAUO,UAAY,mBAGhDF,QAAQC,IAAIT,GACZF,KAAKC,SAAS,CAACN,KAAMO,IAErBF,KAAKP,MAAMoB,QAAQ,CAACC,QAASd,KAAKN,MAAMC,OAC3B,MAAVO,IACDE,SAASC,eAAe,UAAUO,UAAY,GAC9CR,SAASC,eAAe,WAAWO,UAAY,GAC/CR,SAASC,eAAe,QAAQC,MAAQJ,K,oCAM1C,IACIA,EADAC,EAASC,SAASC,eAAe,QAAQC,MAE7C,IACEJ,EAASZ,EAAQyB,SAASZ,EAAQ,CAACK,SAAS,EAAMQ,eAAe,EAAMP,OAAQ,IAC/E,SACAC,QAAQC,IAAI,oBACZP,SAASC,eAAe,WAAWO,UAAY,oBAGjDZ,KAAKC,SAAS,CAACN,KAAMO,IACrBF,KAAKP,MAAMoB,QAAQ,CAACC,QAASd,KAAKN,MAAMC,OAE3B,MAAVO,IACDE,SAASC,eAAe,UAAUO,UAAY,GAC9CR,SAASC,eAAe,WAAWO,UAAY,GAC/CR,SAASC,eAAe,OAAOC,MAAQJ,K,+BAMzC,OACE,kBAAC,MAAD,KACE,kBAAC,SAAD,KACE,yBAAKe,UAAU,SACX,yBAAKA,UAAU,WACb,8BAAUA,UAAU,mBAAmBC,GAAG,MAAMC,YAAY,MAAMC,KAAK,QAEzE,0BAAMF,GAAG,SAASG,MAAO,CAACC,MAAO,WAGvC,kBAAC,SAAD,KACE,yBAAKL,UAAU,YACb,kBAAC,SAAD,CAAQM,QAAQ,OAAOC,QAASxB,KAAKJ,YAArC,qBAGJ,kBAAC,SAAD,KACE,yBAAKqB,UAAU,SACX,yBAAKA,UAAU,WACX,8BAAUA,UAAU,mBAAmBC,GAAG,OAAOC,YAAY,OAAOC,KAAK,QAE7E,0BAAMF,GAAG,UAAUG,MAAO,CAACC,MAAO,WAGxC,kBAAC,SAAD,KACE,yBAAKL,UAAU,YACb,kBAAC,SAAD,CAAQM,QAAQ,OAAOC,QAASxB,KAAKF,aAArC,yB,GAtFW2B,aCyBRC,E,YA1BX,WAAYjC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACToB,QAAS,IAEb,EAAKD,QAAU,EAAKA,QAAQhB,KAAb,gBALA,E,qEAOXH,GACJM,KAAKC,SAASP,K,+BAId,OACI,kBAAC,OAAD,CAAM6B,QAAQ,OAAOF,MAAO,CAACM,UAAW,GAAIC,SAAU,GAAIC,aAAc,KAEpE,kBAAC,WAAD,KACI,kBAAC,YAAD,CAAWC,aAAa,YACpB,kBAAC,QAAD,2B,GAlBHL,aC+BNM,E,YA9BX,WAAYtC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACToB,QAAS,IAEb,EAAKD,QAAU,EAAKA,QAAQhB,KAAb,gBALA,E,qEAOXH,GACJM,KAAKC,SAASP,K,+BAId,OACI,kBAAC,SAAD,CAAQwB,GAAG,UACP,kBAAC,YAAD,KACI,kBAAC,UAAD,KACI,kBAAC,UAAD,KACI,kBAAC,SAAD,KACI,yCACe,uBAAGc,KAAK,iCAAR,6B,GApBxBP,aCiCRQ,E,YA7BX,WAAYxC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACToB,QAAS,IAEb,EAAKD,QAAU,EAAKA,QAAQhB,KAAb,gBALA,E,qEAOXH,GACJM,KAAKC,SAASP,K,+BAId,OACI,kBAAC,YAAD,CAAWwC,SAAO,GACd,kBAAC,EAAD,MACA,kBAAC,YAAD,KACI,kBAAC,UAAD,KACI,kBAAC,SAAD,KACQ,kBAAC,EAAD,CAAUrB,QAASb,KAAKa,QAASC,QAASd,KAAKN,MAAMoB,aAKrE,kBAAC,EAAD,W,GAxBGW,a,YCQJU,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCIcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASC,eAAe,SD2H3C,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4a24833d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Column, Box, Button } from 'bloomer';\nvar convert = require('xml-js');\n\nclass Xml2Json extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: ''\n    }\n    this.getFileXml = this.getFileXml.bind(this);\n    this.getFileJson = this.getFileJson.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    this.setState({\n      file: ''\n    });\n  }\n\n  getFileXml() {\n    let textIn = document.getElementById(\"xml\").value;\n    let result;\n    try {\n      result = convert.xml2json(textIn, {compact: true, spaces: 4})\n    } catch {\n      console.log(\"invalid argument\");\n      document.getElementById(\"boxXml\").innerHTML = \"Xml inválido!\";\n    }\n\n    console.log(result);\n    this.setState({file: result});\n\n    this.props.handler({xmlFile: this.state.file});\n    if(result != null){\n      document.getElementById(\"boxXml\").innerHTML = \"\";\n      document.getElementById(\"boxJson\").innerHTML = \"\";\n      document.getElementById(\"json\").value = result;\n    }  \n\n  }\n\n  getFileJson() {\n    let textIn = document.getElementById(\"json\").value;\n    let result;\n    try {\n      result = convert.json2xml(textIn, {compact: true, ignoreComment: true, spaces: 4})\n    } catch {\n      console.log(\"invalid argument\");\n      document.getElementById(\"boxJson\").innerHTML = \"Json inválido!\";\n    }\n\n    this.setState({file: result});\n    this.props.handler({xmlFile: this.state.file});\n\n    if(result != null){\n      document.getElementById(\"boxXml\").innerHTML = \"\";\n      document.getElementById(\"boxJson\").innerHTML = \"\";\n      document.getElementById(\"xml\").value = result;\n    }  \n\n  }\n\n  render() {\n    return (\n      <Box>  \n        <Column>\n          <div className=\"field\"> \n              <div className=\"control\">\n                <textarea className=\"textarea is-info\" id=\"xml\" placeholder=\"XML\" rows=\"10\"></textarea>\n              </div>\n              <span id=\"boxXml\" style={{color: \"red\"}}></span>\n          </div>\n        </Column>\n        <Column>\n          <div className=\"menu-row\" >\n            <Button isColor='info' onClick={this.getFileXml}>Convert to Json</Button>\n          </div>\n        </Column>\n        <Column>\n          <div className=\"field\">\n              <div className=\"control\">\n                  <textarea className=\"textarea is-info\" id=\"json\" placeholder=\"json\" rows=\"10\"></textarea>\n              </div>\n              <span id=\"boxJson\" style={{color: \"red\"}}></span>\n          </div>\n        </Column>\n        <Column>\n          <div className=\"menu-row\" >\n            <Button isColor='info' onClick={this.getFileJson}>Convert to Xml</Button>\n          </div>\n        </Column>\n      </Box>\n    )\n  }\n\n}\n\nexport default Xml2Json;\n","import React, { Component } from 'react';\nimport { Container, Hero, HeroBody, Title } from 'bloomer';\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xmlFile: \"\"\n        }\n        this.handler = this.handler.bind(this);\n    }\n    handler(state) {\n        this.setState(state);\n    }\n\n    render() {\n        return (\n            <Hero isColor='info' style={{marginTop: 10, fontSize: 30, marginBottom: 10}}>\n                \n                <HeroBody>\n                    <Container hasTextAlign='centered'>\n                        <Title>XML to Json</Title>\n                    </Container>\n                </HeroBody>\n            </Hero>\n                \n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { Column, Columns, Container, Footer, Content } from 'bloomer';\nclass MyFooter extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xmlFile: \"\"\n        }\n        this.handler = this.handler.bind(this);\n    }\n    handler(state) {\n        this.setState(state);\n    }\n\n    render() {\n        return (\n            <Footer id='footer'>\n                <Container>\n                    <Content>\n                        <Columns>\n                            <Column>\n                                <p>\n                                    Powered by <a href=\"https://filipejesse.github.io\">Filipe Jessé</a>\n                                </p>\n                            </Column>\n                        </Columns>\n                    </Content>\n                </Container>\n            </Footer>\n        );\n    }\n}\n\nexport default MyFooter;\n","import React, { Component } from 'react';\nimport { Column, Columns, Container } from 'bloomer';\nimport Xml2Json from '../components/Xml2Json';\nimport Header from '../components/Header';\nimport MyFooter from '../components/MyFooter';\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xmlFile: \"\"\n        }\n        this.handler = this.handler.bind(this);\n    }\n    handler(state) {\n        this.setState(state);\n    }\n\n    render() {\n        return (\n            <Container isFluid>\n                <Header />\n                <Container>\n                    <Columns>\n                        <Column>\n                                <Xml2Json handler={this.handler} xmlFile={this.state.xmlFile}/>\n                            \n                        </Column>\n                    </Columns>\n                </Container>\n                <MyFooter />\n            </Container>\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './containers/Home';\nimport 'bulma';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}