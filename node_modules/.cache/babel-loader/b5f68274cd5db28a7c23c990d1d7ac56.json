{"ast":null,"code":"var _jsxFileName = \"/home/jesse/Documents/Git/xml2json-converter/src/components/Xml2Json.jsx\";\nimport React, { Component } from 'react';\nimport { Column, Box, Button, Notification, Delete } from 'bloomer';\n\nvar convert = require('xml-js');\n\nclass Xml2Json extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: ''\n    };\n    this.getFileXml = this.getFileXml.bind(this);\n    this.getFileJson = this.getFileJson.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    this.setState({\n      file: ''\n    });\n  }\n\n  getFileXml() {\n    let textIn = document.getElementById(\"xml\").value;\n    let result;\n\n    try {\n      result = convert.xml2json(textIn, {\n        compact: true,\n        spaces: 4\n      });\n    } catch {\n      console.log(\"invalid argument\");\n      document.getElementById(\"boxXml\").innerHTML = \"Xml inválido!\";\n    }\n\n    console.log(result);\n    this.setState({\n      file: result\n    });\n    this.props.handler({\n      xmlFile: this.state.file\n    });\n\n    if (result != null) {\n      document.getElementById(\"boxXml\").innerHTML = \"\";\n      document.getElementById(\"boxJson\").innerHTML = \"\";\n      document.getElementById(\"json\").value = result;\n    }\n  }\n\n  getFileJson() {\n    let textIn = document.getElementById(\"json\").value;\n    let result;\n\n    try {\n      result = convert.json2xml(textIn, {\n        compact: true,\n        ignoreComment: true,\n        spaces: 4\n      });\n    } catch {\n      console.log(\"invalid argument\");\n      document.getElementById(\"boxJson\").innerHTML = \"Json inválido!\";\n    }\n\n    this.setState({\n      file: result\n    });\n    this.props.handler({\n      xmlFile: this.state.file\n    });\n\n    if (result != null) {\n      document.getElementById(\"boxXml\").innerHTML = \"\";\n      document.getElementById(\"boxJson\").innerHTML = \"\";\n      document.getElementById(\"xml\").value = result;\n    }\n  }\n\n  render() {\n    return React.createElement(Box, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"textarea is-info\",\n      id: \"xml\",\n      placeholder: \"XML\",\n      rows: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      id: \"boxXml\",\n      style: {\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))), React.createElement(Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"menu-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Button, {\n      isColor: \"info\",\n      onClick: this.getFileXml,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Convert to Json\"))), React.createElement(Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"textarea is-info\",\n      id: \"json\",\n      placeholder: \"json\",\n      rows: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      id: \"boxJson\",\n      style: {\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))), React.createElement(Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"menu-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Button, {\n      isColor: \"info\",\n      onClick: this.getFileJson,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Convert to Xml\"))));\n  }\n\n}\n\nexport default Xml2Json;","map":{"version":3,"sources":["/home/jesse/Documents/Git/xml2json-converter/src/components/Xml2Json.jsx"],"names":["React","Component","Column","Box","Button","Notification","Delete","convert","require","Xml2Json","constructor","props","state","file","getFileXml","bind","getFileJson","handleSubmit","setState","textIn","document","getElementById","value","result","xml2json","compact","spaces","console","log","innerHTML","handler","xmlFile","json2xml","ignoreComment","render","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Column, Box, Button, Notification, Delete } from 'bloomer';\nvar convert = require('xml-js');\n\nclass Xml2Json extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: ''\n    }\n    this.getFileXml = this.getFileXml.bind(this);\n    this.getFileJson = this.getFileJson.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    this.setState({\n      file: ''\n    });\n  }\n\n  getFileXml() {\n    let textIn = document.getElementById(\"xml\").value;\n    let result;\n    try {\n      result = convert.xml2json(textIn, {compact: true, spaces: 4})\n    } catch {\n      console.log(\"invalid argument\");\n      document.getElementById(\"boxXml\").innerHTML = \"Xml inválido!\";\n    }\n\n    console.log(result);\n    this.setState({file: result});\n\n    this.props.handler({xmlFile: this.state.file});\n    if(result != null){\n      document.getElementById(\"boxXml\").innerHTML = \"\";\n      document.getElementById(\"boxJson\").innerHTML = \"\";\n      document.getElementById(\"json\").value = result;\n    }  \n\n  }\n\n  getFileJson() {\n    let textIn = document.getElementById(\"json\").value;\n    let result;\n    try {\n      result = convert.json2xml(textIn, {compact: true, ignoreComment: true, spaces: 4})\n    } catch {\n      console.log(\"invalid argument\");\n      document.getElementById(\"boxJson\").innerHTML = \"Json inválido!\";\n    }\n\n    this.setState({file: result});\n    this.props.handler({xmlFile: this.state.file});\n\n    if(result != null){\n      document.getElementById(\"boxXml\").innerHTML = \"\";\n      document.getElementById(\"boxJson\").innerHTML = \"\";\n      document.getElementById(\"xml\").value = result;\n    }  \n\n  }\n\n  render() {\n    return (\n      <Box>  \n        <Column>\n          <div className=\"field\"> \n              <div className=\"control\">\n                <textarea className=\"textarea is-info\" id=\"xml\" placeholder=\"XML\" rows=\"10\"></textarea>\n              </div>\n              <span id=\"boxXml\" style={{color: \"red\"}}></span>\n          </div>\n        </Column>\n        <Column>\n          <div className=\"menu-row\" >\n            <Button isColor='info' onClick={this.getFileXml}>Convert to Json</Button>\n          </div>\n        </Column>\n        <Column>\n          <div className=\"field\">\n              <div className=\"control\">\n                  <textarea className=\"textarea is-info\" id=\"json\" placeholder=\"json\" rows=\"10\"></textarea>\n              </div>\n              <span id=\"boxJson\" style={{color: \"red\"}}></span>\n          </div>\n        </Column>\n        <Column>\n          <div className=\"menu-row\" >\n            <Button isColor='info' onClick={this.getFileJson}>Convert to Xml</Button>\n          </div>\n        </Column>\n      </Box>\n    )\n  }\n\n}\n\nexport default Xml2Json;\n"]},"metadata":{},"sourceType":"module"}